[1/11] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\ESP32_Projects\esp32-atgs\build\bootloader\esp-idf\esptool_py && c:\esp\tools\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/ESP32_Projects/esp32-atgs/build/bootloader/bootloader.bin"
Bootloader binary size 0x6760 bytes. 0x8a0 bytes (8%) free.
[2/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[3/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/connect.c.obj
[4/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/server.c.obj
[5/9] Linking C static library esp-idf\main\libmain.a
[6/9] Generating ld/sections.ld
[7/9] Linking CXX executable ESP32_CAM_ATGS.elf
[8/9] Generating binary image from built executable
esptool.py v4.5.1
Creating esp32 image...
Merged 25 ELF sections
Successfully created esp32 image.
Generated D:/ESP32_Projects/esp32-atgs/build/ESP32_CAM_ATGS.bin
[9/9] cmd.exe /C "cd /D D:\ESP32_Projects\esp32-atgs\build\esp-idf\esptool_py && c:\esp\tools\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/ESP32_Projects/esp32-atgs/build/partition_table/partition-table.bin D:/ESP32_Projects/esp32-atgs/build/ESP32_CAM_ATGS.bin"
ESP32_CAM_ATGS.bin binary size 0xed940 bytes. Smallest app partition is 0x100000 bytes. 0x126c0 bytes (7%) free.
